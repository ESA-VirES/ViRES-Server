#-------------------------------------------------------------------------------
#
# Testing Orbit Counter Data Handling
#
# Project: VirES
# Authors: Martin Paces <martin.paces@eox.at>
#
#-------------------------------------------------------------------------------
# Copyright (C) 2016 EOX IT Services GmbH
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies of this Software or works derived from this Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#-------------------------------------------------------------------------------
# pylint: disable=missing-docstring

import unittest
from os import remove
from os.path import exists
from StringIO import StringIO
from numpy import array, linspace, nan, isnan, logical_not
from scipy.interpolate import interp1d

from vires.orbit_counter import (
    update_orbit_counter_file, fetch_orbit_counter_data,
    interpolate_orbit_counter_data,
)
from vires.time_util import mjd2000_to_datetime
from vires.tests import ArrayMixIn


TEST_ORBCNT = """%orbit       MJD2000           date           UT        phi_AN    Source
     1   5074.55678856838   2013-11-22   13:21:46.532    17.148     0
     2   5074.62247841386   2013-11-22   14:56:22.135    -6.585     0
     3   5074.68816788308   2013-11-22   16:30:57.705   -30.319     0
     4   5074.75385705056   2013-11-22   18:05:33.249   -54.053     0
     5   5074.81954753306   2013-11-22   19:40:08.907   -77.787     0
     6   5074.88523909682   2013-11-22   21:14:44.658  -101.522     0
     7   5074.95093005663   2013-11-22   22:49:20.357  -125.256     0
     8   5075.01661939640   2013-11-23   00:23:55.916  -148.991     1
     9   5075.08230875432   2013-11-23   01:58:31.476  -172.727     1
    10   5075.14799768524   2013-11-23   03:33:07.000   163.538     1
    11   5075.21368658496   2013-11-23   05:07:42.521   139.804     1
    12   5075.27937654080   2013-11-23   06:42:18.133   116.070     1
    13   5075.34506670665   2013-11-23   08:16:53.763    92.334     1
    14   5075.41075729858   2013-11-23   09:51:29.431    68.598     1
    15   5075.47644769074   2013-11-23   11:26:05.080    44.863     1
    16   5075.54213727452   2013-11-23   13:00:40.661    21.130     1
    17   5075.60782653233   2013-11-23   14:35:16.212    -2.604     1
    18   5075.67351543810   2013-11-23   16:09:51.734   -26.337     1
    19   5075.73920386937   2013-11-23   17:44:27.214   -50.071     1
    20   5075.80489331204   2013-11-23   19:19:02.782   -73.805     1
    21   5075.87058408791   2013-11-23   20:53:38.465   -97.539     1
    22   5075.93627452245   2013-11-23   22:28:14.119  -121.274     1
    23   5076.00196393067   2013-11-24   00:02:49.684  -145.009     1
    24   5076.06765277823   2013-11-24   01:37:25.200  -168.743     1
    25   5076.13334117504   2013-11-24   03:12:00.678   167.522     1
    26   5076.19902948011   2013-11-24   04:46:36.147   143.788     1
    27   5076.26471876400   2013-11-24   06:21:11.701   120.054     1
    28   5076.33040819596   2013-11-24   07:55:47.268    96.318     1
    29   5076.39609834738   2013-11-24   09:30:22.897    72.582     1
    30   5076.46178834932   2013-11-24   11:04:58.513    48.848     1
    31   5076.52747767372   2013-11-24   12:39:34.071    25.114     1
    32   5076.59316658368   2013-11-24   14:14:09.593     1.381     1
    33   5076.65885518491   2013-11-24   15:48:45.088   -22.353     1
    34   5076.72454331350   2013-11-24   17:23:20.542   -46.087     1
    35   5076.79023217922   2013-11-24   18:57:56.060   -69.820     1
    36   5076.85592247127   2013-11-24   20:32:31.701   -93.554     1
    37   5076.92161276378   2013-11-24   22:07:07.343  -117.289     1
    38   5076.98730203137   2013-11-24   23:41:42.895  -141.023     1
    39   5077.05299065216   2013-11-25   01:16:18.392  -164.758     1
    40   5077.11867884640   2013-11-25   02:50:53.852   171.507     1
    41   5077.18436686462   2013-11-25   04:25:29.297   147.773     1
    42   5077.25005571591   2013-11-25   06:00:04.814   124.040     1
    43   5077.31574478094   2013-11-25   07:34:40.349   100.304     1
    44   5077.38143463153   2013-11-25   09:09:15.952    76.568     1
    45   5077.44712437456   2013-11-25   10:43:51.546    52.834     1
    46   5077.51281363145   2013-11-25   12:18:27.098    29.100     1
    47   5077.57850232767   2013-11-25   13:53:02.601     5.366     1
    48   5077.64419076359   2013-11-25   15:27:38.082   -18.367     1
    49   5077.70987874735   2013-11-25   17:02:13.524   -42.100     1
    50   5077.77556727827   2013-11-25   18:36:49.013   -65.834     1
    51   5077.84125720756   2013-11-25   20:11:24.623   -89.568     1
    52   5077.90694743162   2013-11-25   21:46:00.258  -113.302     1
    53   5077.97263657860   2013-11-25   23:20:35.800  -137.037     1
    54   5078.03832502989   2013-11-26   00:55:11.283  -160.771     1
    55   5078.10401303694   2013-11-26   02:29:46.726   175.494     1
    56   5078.16970077157   2013-11-26   04:04:22.147   151.760     1
    57   5078.23538917955   2013-11-26   05:38:57.625   128.026     1
    58   5078.30107806996   2013-11-26   07:13:33.145   104.292     1
    59   5078.36676760437   2013-11-26   08:48:08.721    80.556     1
    60   5078.43245709874   2013-11-26   10:22:44.293    56.821     1
    61   5078.49814628484   2013-11-26   11:57:19.839    33.087     1
    62   5078.56383477012   2013-11-26   13:31:55.324     9.353     1
    63   5078.62952304725   2013-11-26   15:06:30.791   -14.380     1
    64   5078.69521089084   2013-11-26   16:41:06.221   -38.113     1
    65   5078.76089905528   2013-11-26   18:15:41.678   -61.847     1
    66   5078.82658863207   2013-11-26   19:50:17.258   -85.581     1
    67   5078.89227876952   2013-11-26   21:24:52.886  -109.315     1
    68   5078.95796782896   2013-11-26   22:59:28.420  -133.049     1
    69   5079.02365655266   2013-11-27   00:34:03.926  -156.784     0
    70   5079.08934438555   2013-11-27   02:08:39.355   179.481     0
    71   5079.15503192600   2013-11-27   03:43:14.758   155.747     0
    72   5079.22071992001   2013-11-27   05:17:50.201   132.014     0
    73   5079.28640876198   2013-11-27   06:52:25.717   108.280     0
    74   5079.35209806031   2013-11-27   08:27:01.272    84.544     0
    75   5079.41778746108   2013-11-27   10:01:36.837    60.808     0
    76   5079.48347667931   2013-11-27   11:36:12.385    37.074     0
    77   5079.54916510126   2013-11-27   13:10:47.865    13.341     0
    78   5079.61485331645   2013-11-27   14:45:23.327   -10.392     0
    79   5079.68054112047   2013-11-27   16:19:58.753   -34.125     0
    80   5079.74622891983   2013-11-27   17:54:34.179   -57.859     0
    81   5079.81191814132   2013-11-27   19:29:09.727   -81.593     0
    82   5079.87760817865   2013-11-27   21:03:45.347  -105.327     0
    83   5079.94329735450   2013-11-27   22:38:20.891  -129.061     0
    84   5080.00898560742   2013-11-28   00:12:56.356  -152.795     1
    85   5080.07467330713   2013-11-28   01:47:31.774  -176.530     1
    86   5080.14036068460   2013-11-28   03:22:07.163   159.735     1
    87   5080.20604824042   2013-11-28   04:56:42.568   136.002     1
    88   5080.27173686260   2013-11-28   06:31:18.065   112.268     1
    89   5080.33742578840   2013-11-28   08:05:53.588    88.532     1
    90   5080.40311499918   2013-11-28   09:40:29.136    64.797     1
    91   5080.46880409028   2013-11-28   11:15:04.673    41.063     1
    92   5080.53449234925   2013-11-28   12:49:40.139    17.330     1
    93   5080.60018035583   2013-11-28   14:24:15.583    -6.403     1
    94   5080.66586798476   2013-11-28   15:58:50.994   -30.136     1
    95   5080.73155529937   2013-11-28   17:33:26.378   -53.870     1
    96   5080.79724391457   2013-11-28   19:08:01.874   -77.603     1
    97   5080.86293362221   2013-11-28   20:42:37.465  -101.337     1
    98   5080.92862273473   2013-11-28   22:17:13.004  -125.071     1
    99   5080.99431084609   2013-11-28   23:51:48.457  -148.806     1
   100   5081.05999842240   2013-11-29   01:26:23.864  -172.540     1
"""

DATA_ORBCNT = {
    'orbit': array([
        1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
        21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,
        39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
        57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
        75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92,
        93, 94, 95, 96, 97, 98, 99, 100,
    ], 'uint32'),
    'MJD2000': array([
        5074.55678856838, 5074.62247841386, 5074.68816788308, 5074.75385705056,
        5074.81954753306, 5074.88523909682, 5074.95093005663, 5075.01661939640,
        5075.08230875432, 5075.14799768524, 5075.21368658496, 5075.27937654080,
        5075.34506670665, 5075.41075729858, 5075.47644769074, 5075.54213727452,
        5075.60782653233, 5075.67351543810, 5075.73920386937, 5075.80489331204,
        5075.87058408791, 5075.93627452245, 5076.00196393067, 5076.06765277823,
        5076.13334117504, 5076.19902948011, 5076.26471876400, 5076.33040819596,
        5076.39609834738, 5076.46178834932, 5076.52747767372, 5076.59316658368,
        5076.65885518491, 5076.72454331350, 5076.79023217922, 5076.85592247127,
        5076.92161276378, 5076.98730203137, 5077.05299065216, 5077.11867884640,
        5077.18436686462, 5077.25005571591, 5077.31574478094, 5077.38143463153,
        5077.44712437456, 5077.51281363145, 5077.57850232767, 5077.64419076359,
        5077.70987874735, 5077.77556727827, 5077.84125720756, 5077.90694743162,
        5077.97263657860, 5078.03832502989, 5078.10401303694, 5078.16970077157,
        5078.23538917955, 5078.30107806996, 5078.36676760437, 5078.43245709874,
        5078.49814628484, 5078.56383477012, 5078.62952304725, 5078.69521089084,
        5078.76089905528, 5078.82658863207, 5078.89227876952, 5078.95796782896,
        5079.02365655266, 5079.08934438555, 5079.15503192600, 5079.22071992001,
        5079.28640876198, 5079.35209806031, 5079.41778746108, 5079.48347667931,
        5079.54916510126, 5079.61485331645, 5079.68054112047, 5079.74622891983,
        5079.81191814132, 5079.87760817865, 5079.94329735450, 5080.00898560742,
        5080.07467330713, 5080.14036068460, 5080.20604824042, 5080.27173686260,
        5080.33742578840, 5080.40311499918, 5080.46880409028, 5080.53449234925,
        5080.60018035583, 5080.66586798476, 5080.73155529937, 5080.79724391457,
        5080.86293362221, 5080.92862273473, 5080.99431084609, 5081.05999842240,
    ]),
    'phi_AN': array([
        17.148, -6.585, -30.319, -54.053, -77.787, -101.522, -125.256, -148.991,
        -172.727, 163.538, 139.804, 116.070, 92.334, 68.598, 44.863, 21.130,
        -2.604, -26.337, -50.071, -73.805, -97.539, -121.274, -145.009,
        -168.743, 167.522, 143.788, 120.054, 96.318, 72.582, 48.848, 25.114,
        1.381, -22.353, -46.087, -69.820, -93.554, -117.289, -141.023, -164.758,
        171.507, 147.773, 124.040, 100.304, 76.568, 52.834, 29.100, 5.366,
        -18.367, -42.100, -65.834, -89.568, -113.302, -137.037, -160.771,
        175.494, 151.760, 128.026, 104.292, 80.556, 56.821, 33.087, 9.353,
        -14.380, -38.113, -61.847, -85.581, -109.315, -133.049, -156.784,
        179.481, 155.747, 132.014, 108.280, 84.544, 60.808, 37.074, 13.341,
        -10.392, -34.125, -57.859, -81.593, -105.327, -129.061, -152.795,
        -176.530, 159.735, 136.002, 112.268, 88.532, 64.797, 41.063, 17.330,
        -6.403, -30.136, -53.870, -77.603, -101.337, -125.071, -148.806,
        -172.540,
    ]),
    'Source': array([
        0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1,
    ], 'uint8'),
}

INT_CONF_ORBCNT = {
    'orbit': {
        'kind': 'zero',
        'dtype': 'int32',
        'nodata': -1,
        'is_nodata': (lambda v: v == -1),
    },
    #'MJD2000': {
    #    'kind': 'zero',
    #    'dtype': 'float',
    #    'nodata': nan,
    #    'is_nodata': isnan,
    #},
    'phi_AN': {
        'kind': 'zero',
        'dtype': 'float',
        'nodata': nan,
        'is_nodata': isnan,
    },
    'Source': {
        'kind': 'zero',
        'dtype': 'int8',
        'nodata': -1,
        'is_nodata': (lambda v: v == -1),
    },
}

class TestOrbitCounter(ArrayMixIn, unittest.TestCase):
    FILE = "./test_tmp_OrbitCounter.cdf"

    def setUp(self):
        update_orbit_counter_file(StringIO(TEST_ORBCNT), self.FILE)

    def tearDown(self):
        if exists(self.FILE):
            remove(self.FILE)

    def _fetch(self, start, stop, idx_start, idx_stop):
        data = fetch_orbit_counter_data(
            self.FILE, mjd2000_to_datetime(start), mjd2000_to_datetime(stop)
        )

        for field, reference in DATA_ORBCNT.items():
            self.assertEqual(data[field].shape, (idx_stop - idx_start,))
            self.assertAllEqual(data[field], reference[idx_start:idx_stop])
            self.assertEqual(data[field].dtype, reference.dtype)

    def _interpolate(self, start, stop, count):
        times = linspace(start, stop, count)
        data = interpolate_orbit_counter_data(self.FILE, times)
        reference = dict(
            (
                field,
                interp1d(
                    DATA_ORBCNT['MJD2000'], DATA_ORBCNT[field],
                    bounds_error=False,
                    kind=conf['kind'],
                    fill_value=conf['nodata'],
                )(times).astype(conf['dtype'])
            ) for field, conf in INT_CONF_ORBCNT.items()
        )

        self.assertEqual(set(data), set(reference))

        for field, conf in INT_CONF_ORBCNT.items():
            _data = data[field]
            _ref  = reference[field]
            _data_nodata = conf['is_nodata'](_data)
            _ref_nodata = conf['is_nodata'](_ref)

            self.assertEqual(_data.shape, (count,))
            self.assertEqual(_data.shape, _ref.shape)

            self.assertEqual(
                _data[_data_nodata].shape,
                _ref[_ref_nodata].shape
            )

            self.assertAllEqual(
                _data[logical_not(_data_nodata)],
                _ref[logical_not(_ref_nodata)]
            )

    def test_fetch(self):
        # full interval
        self._fetch(5074.55678856838, 5081.05999842240, 0, 100)
        self._fetch(5074.55, 5081.06, 0, 100)
        self._fetch(5073.00, 5083.00, 0, 100)
        # inner subset
        self._fetch(5076.75, 5080.00, 33, 84)
        # partial overlap - lower
        self._fetch(5073.00, 5080.00, 0, 84)
        self._fetch(5070.00, 5074.60, 0, 2)
        # partial overlap - upper
        self._fetch(5076.75, 5083.00, 33, 100)
        self._fetch(5081.00, 5085.00, 98, 100)
        # no overlap - lower
        self._fetch(5070.00, 5074.55, 0, 0)
        self._fetch(5070.00, 5074.55678856838, 0, 0)
        # no overlap - upper
        self._fetch(5081.06, 5085.00, 0, 0)
        self._fetch(5081.05999842241, 5085.00, 0, 0)
    
    def test_interpolate(self):
        # full overlap
        self._interpolate(5073.00, 5083.00, 10)
        # touching the bounds
        self._interpolate(5070.00, 5074.60, 5)
        self._interpolate(5081.00, 5085.00, 5)
        # out of bounds
        self._interpolate(5070.00, 5074.55, 5)
        self._interpolate(5081.06, 5085.00, 5)
        # single value
        self._interpolate(5077.00, 5077.00, 1)


if __name__ == "__main__":
    unittest.main()
